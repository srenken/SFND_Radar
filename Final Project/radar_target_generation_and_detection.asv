clear all
clc;

%% Radar Specifications 
%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Frequency of operation = 77GHz
% Max Range = 200m
% Range Resolution = 1 m
% Max Velocity = 100 m/s
%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Operating carrier frequency of Radar 
fc= 77e9;             %carrier freq
range_max = 200;      % Max Range
range_res = 1;        % Range Resolution
v_max = 100;          % Max Velocity



%speed of light = 3e8
c = 3e8;

%% User Defined Range and Velocity of target
% *%TODO* :
% define the target's initial position and velocity. Note : Velocity
% remains contant

% Initial Velocity of the Target
v_target_init = 40;    % in m/s

% Initial position (radial range) of the Target
range_target_init = 100;   % in m

%% FMCW Waveform Generation

% *%TODO* :
% Design the FMCW waveform by giving the specs of each of its parameters.
% Calculate the Bandwidth (B), Chirp Time (Tchirp) and Slope (slope) of the FMCW
% chirp using the requirements above.

% FMCW Signal Bandwidth
B_sweep = c / (2 * range_res);

% FMCW Signal Chirp Time
T_chirp = 5.5 * 2 * range_max / c;

% FMCW Signal Slope
slope = B_sweep/T_chirp;




                                                          
%The number of chirps in one sequence. Its ideal to have 2^ value for the ease of running the FFT
%for Doppler Estimation. 
Nd=128;                   % #of doppler cells OR #of sent periods % number of chirps

%The number of samples on each chirp. 
Nr=1024;                  %for length of time OR # of range cells

% Timestamp for running the displacement scenario for every sample on each
% chirp
t=linspace(0,Nd*T_chirp,Nr*Nd); %total time for samples


%Creating the vectors for Tx, Rx and Mix based on the total samples input.
Tx=zeros(1,length(t)); %transmitted signal
Rx=zeros(1,length(t)); %received signal
Mix = zeros(1,length(t)); %beat signal

%Similar vectors for range_covered and time delay.
r_t=zeros(1,length(t));
td=zeros(1,length(t));


%% Signal generation and Moving Target simulation
% Running the radar scenario over the time. 


for i=1:length(t)         
    
    
    % *%TODO* :
    %For each time stamp update the Range of the Target for constant velocity. 
    if i == 1
        r_t(i) = range_target_init;
    else
        r_t(i) = r_t(i-1) + v_target_init * ( t(i)-t(i-1) );
    end

    td(i) = 2 * r_t(i) / c;
    

    % *%TODO* :
    %For each time sample we need update the transmitted and
    %received signal. 
    Tx(i) = cos( 2 * pi * ( fc * t(i) + slope * t(i)^2 / 2 ) );
    Rx (i)  = cos( 2 * pi * ( fc * ( t(i) - td(i) ) + slope * ( t(i)-td(i) )^2 / 2 ) );
    
    % *%TODO* :
    %Now by mixing the Transmit and Receive generate the beat signal
    %This is done by element wise matrix multiplication of Transmit and
    %Receiver Signal
    Mix(i) = Tx(i).*Rx(i);
    
end

%% RANGE MEASUREMENT;

 % *%TODO* :
%reshape the vector into Nr*Nd array. Nr and Nd here would also define the size of
%Range and Doppler FFT respectively.
Mix2D = reshape(Mix, [Nr,Nd]);

 % *%TODO* :
%run the FFT on the beat signal along the range bins dimension (Nr).
signal_fft = fft(Mix2D, Nr, 1);

  % *TODO* :
% normalize and get absolute values
signal_fft = abs(signal_fft/Nr);  % 


 % *%TODO* :
% Output of FFT is double sided signal, but we are interested in only one side of the spectrum.
% Hence we throw out half of the samples.
signal_fft_p1 = signal_fft(1:Nr/2+1);

%plotting the range
figure ('Name','Range from First FFT')
subplot(2,1,1)

 % *%TODO* :
 % plot FFT output 

f = (0:(Nr/2)); 
plot(f, signal_fft_p1);
 
axis ([0 200 0 0.5]);



%% RANGE DOPPLER RESPONSE
% The 2D FFT implementation is already provided here. This will run a 2DFFT
% on the mixed signal (beat signal) output and generate a range doppler
% map.You will implement CFAR on the generated RDM


% Range Doppler Map Generation.

% The output of the 2D FFT is an image that has reponse in the range and
% doppler FFT bins. So, it is important to convert the axis from bin sizes
% to range and doppler based on their Max values.

Mix=reshape(Mix,[Nr,Nd]);

% 2D FFT using the FFT size for both dimensions.
sig_fft2 = fft2(Mix,Nr,Nd);

% Taking just one side of signal from Range dimension.
sig_fft2 = sig_fft2(1:Nr/2,1:Nd);
sig_fft2 = fftshift (sig_fft2);
RDM = abs(sig_fft2);
RDM = 10*log10(RDM) ;

%use the surf function to plot the output of 2DFFT and to show axis in both
%dimensions
doppler_axis = linspace(-100,100,Nd);
range_axis = linspace(-200,200,Nr/2)*((Nr/2)/400);
%doppler_axis = linspace(1, Nd, Nd);
%range_axis = linspace(1, Nr/2, Nr/2);
figure('Name', '2D FFT range doppler Map');
surf(doppler_axis,range_axis,RDM);

%% CFAR implementation

%Slide Window through the complete Range Doppler Map

% *%TODO* :
%Select the number of Training Cells in both the dimensions.

Tr = 8;
Td = 8;

% *%TODO* :
%Select the number of Guard Cells in both dimensions around the Cell under 
%test (CUT) for accurate estimation
Gr = 4;
Gd = 8;


% *%TODO* :
% offset the threshold by SNR value in dB
offset = 8;

% *%TODO* :
%Create a vector to store noise_level for each iteration on training cells
noise_level = zeros(1,1);


% *%TODO* :
%design a loop such that it slides the CUT across range doppler map by
%giving margins at the edges for Training and Guard Cells.
%For every iteration sum the signal level within all the training
%cells. To sum convert the value from logarithmic to linear using db2pow
%function. Average the summed values for all of the training
%cells used. After averaging convert it back to logarithimic using pow2db.
%Further add the offset to it to determine the threshold. Next, compare the
%signal under CUT with this threshold. If the CUT level > threshold assign
%it a value of 1, else equate it to 0.

% Use RDM[x,y] as the matrix from the output of 2D FFT for implementing
% CFAR

% Training and Guards Cells numbers
N_guard_cells = (2 * Gr + 1) * (2 * Gd + 1) - 1; % substract CUT
N_training_cells = (2 * Tr + 2 * Gr + 1) * (2 * Td + 2 * Gd + 1) - (N_guard_cells + 1);


CFAR = zeros(size(RDM));

% loopin
for range_i = Tr + Gr + 1:Nr/2 - (Gr+Tr)
    for doppler_i = Td + Gd + 1: Nd - (Gd + Td)

        
        
        % init / reset per CUT vars
        num_training_cells_counted = 0;
        noise_level = 0;
        

        % Step through all training cells to and sum all values to determine the noise level
        for p = range_i - (Tr + Gr):range_i + Tr + Gr
            for q = doppler_i - (Td + Gd):doppler_i + Td + Gd
           
                   % Exclude Guard cells and CUT
                   if (abs(range_i - p) > Gr || abs(doppler_i - q) > Gd)
                       % Converrt db to power and to noise level
                       noise_level = noise_level + db2pow(RDM(p,q));
                       num_training_cells_counted = num_training_cells_counted + 1;
                   end
            end
        end

        

        % Calc the noise threshold (summed up noise of all training cell
        % divided by number of training cells
        % convert back to db
        threshold = pow2db(noise_level/N_training_cells);

        % Add offset to the threshold
        threshold = threshold + offset;

        % Get CUT values and compare against threshold
        signal = RDM(range_i, doppler_i);
        

        if  (RDM(range_i, doppler_i) > threshold)
            CFAR(range_i, doppler_i) = 1;
        end
        

    end
end


% *%TODO* :
% The process above will generate a thresholded block, which is smaller 
%than the Range Doppler Map as the CUT cannot be located at the edges of
%matrix. Hence,few cells will not be thresholded. To keep the map size same
% set those values to 0. 
 








% *%TODO* :
%display the CFAR output using the Surf function like we did for Range
%Doppler Response output.
figure('Name', "CA-CFAR filtered RDM")

surf(doppler_axis,range_axis,CFAR);
colorbar;
xlabel('Velocity');
ylabel('Range');


 
 